/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.conversor;

import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author sac10
 */
public class MenuConversor extends javax.swing.JFrame {

    String tipoConversor = "moneda";
    String opcion = "Dolar a Euros";

    /**
     * Creates new form MenuConversor
     */
    int xMouse, yMouse;

    public MenuConversor() {
        initComponents();
        lblTituloConversorTemp.setVisible(false);
        lblTituloConversorUnidades.setVisible(false);
        System.out.println(opcion);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        panelBarraSuperior = new javax.swing.JPanel();
        lblX = new javax.swing.JLabel();
        lblLogoAlura = new javax.swing.JLabel();
        lblConversorTemperatura = new javax.swing.JLabel();
        lblNombreConversorTemperatura = new javax.swing.JLabel();
        lblNombreConversorMoneda = new javax.swing.JLabel();
        lblConversorMoneda = new javax.swing.JLabel();
        lblConversorUnidades = new javax.swing.JLabel();
        lblNombreConversorUnidades = new javax.swing.JLabel();
        lblFondoMenu = new javax.swing.JLabel();
        panelContenedor = new javax.swing.JPanel();
        lblSignoSalida = new javax.swing.JLabel();
        lblSignoEntrada = new javax.swing.JLabel();
        tituloConversor = new javax.swing.JLabel();
        lblSeleccionConversion = new javax.swing.JLabel();
        comboConversiones = new javax.swing.JComboBox<>();
        Separador = new javax.swing.JSeparator();
        lblValorAConvertir = new javax.swing.JLabel();
        lblValorConvertido = new javax.swing.JLabel();
        txtValorConvertir = new javax.swing.JTextField();
        txtValorConvertido = new javax.swing.JTextField();
        btnConvertir = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        lblTituloConversorTemp = new javax.swing.JLabel();
        lblTituloConversorUnidades = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Covnersor Alura");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setUndecorated(true);
        setResizable(false);

        bg.setBackground(new java.awt.Color(255, 255, 255));
        bg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelBarraSuperior.setBackground(new java.awt.Color(255, 255, 255));
        panelBarraSuperior.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelBarraSuperior.setForeground(new java.awt.Color(255, 255, 255));
        panelBarraSuperior.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelBarraSuperiorMouseDragged(evt);
            }
        });
        panelBarraSuperior.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelBarraSuperiorMousePressed(evt);
            }
        });

        lblX.setBackground(new java.awt.Color(255, 0, 0));
        lblX.setFont(new java.awt.Font("Roboto", 1, 36)); // NOI18N
        lblX.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblX.setText("X");
        lblX.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblX.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblXMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblXMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblXMouseExited(evt);
            }
        });

        lblLogoAlura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLogoAlura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/inocoAlura.png"))); // NOI18N

        javax.swing.GroupLayout panelBarraSuperiorLayout = new javax.swing.GroupLayout(panelBarraSuperior);
        panelBarraSuperior.setLayout(panelBarraSuperiorLayout);
        panelBarraSuperiorLayout.setHorizontalGroup(
            panelBarraSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBarraSuperiorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogoAlura, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 855, Short.MAX_VALUE)
                .addComponent(lblX, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelBarraSuperiorLayout.setVerticalGroup(
            panelBarraSuperiorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogoAlura, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addComponent(lblX, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
        );

        bg.add(panelBarraSuperior, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 970, 60));

        lblConversorTemperatura.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConversorTemperatura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/termometro.png"))); // NOI18N
        lblConversorTemperatura.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblConversorTemperatura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblConversorTemperaturaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblConversorTemperaturaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblConversorTemperaturaMouseExited(evt);
            }
        });
        bg.add(lblConversorTemperatura, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 300, 140, 160));

        lblNombreConversorTemperatura.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        lblNombreConversorTemperatura.setText("Conversor de temperatura");
        bg.add(lblNombreConversorTemperatura, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 460, -1, -1));

        lblNombreConversorMoneda.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        lblNombreConversorMoneda.setText("Conversor de moneda");
        bg.add(lblNombreConversorMoneda, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 250, 140, -1));

        lblConversorMoneda.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblConversorMoneda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/monedas.png"))); // NOI18N
        lblConversorMoneda.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblConversorMoneda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblConversorMonedaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblConversorMonedaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblConversorMonedaMouseExited(evt);
            }
        });
        bg.add(lblConversorMoneda, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 140, 140));

        lblConversorUnidades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/metro.png"))); // NOI18N
        lblConversorUnidades.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblConversorUnidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblConversorUnidadesMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblConversorUnidadesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblConversorUnidadesMouseExited(evt);
            }
        });
        bg.add(lblConversorUnidades, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 520, 140, 120));

        lblNombreConversorUnidades.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        lblNombreConversorUnidades.setText("Conversor de unidades");
        bg.add(lblNombreConversorUnidades, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 640, -1, -1));

        lblFondoMenu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFondoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/fondoMenu2.jpg"))); // NOI18N
        bg.add(lblFondoMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, 680));

        panelContenedor.setBackground(new java.awt.Color(255, 255, 255));
        panelContenedor.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSignoSalida.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        lblSignoSalida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSignoSalida.setText("€");
        panelContenedor.add(lblSignoSalida, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 450, 50, 40));

        lblSignoEntrada.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        lblSignoEntrada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSignoEntrada.setText("$");
        panelContenedor.add(lblSignoEntrada, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 340, 50, 40));

        tituloConversor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/textoConversorMoneda.gif"))); // NOI18N
        panelContenedor.add(tituloConversor, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 470, 70));

        lblSeleccionConversion.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        lblSeleccionConversion.setText("Selecciona la conversión que desees realizar");
        panelContenedor.add(lblSeleccionConversion, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 190, -1, -1));

        comboConversiones.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        comboConversiones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Dolar a Euros", "Dolar a Libras Esterlinas", "Dolar a Yen Japones", "Dolar a Won Sur Coreano", "Euros a Dolar", "Libras Esterlinas a Dolar", "Yen Japones a Dolar", "Won Sur Coreano a Dolar" }));
        comboConversiones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comboConversionesMouseClicked(evt);
            }
        });
        comboConversiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboConversionesActionPerformed(evt);
            }
        });
        panelContenedor.add(comboConversiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 240, 220, 30));
        panelContenedor.add(Separador, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 300, 590, 40));

        lblValorAConvertir.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        lblValorAConvertir.setText("Valor a Convertir");
        panelContenedor.add(lblValorAConvertir, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 350, -1, -1));

        lblValorConvertido.setFont(new java.awt.Font("Roboto", 0, 24)); // NOI18N
        lblValorConvertido.setText("Valor Convertido");
        panelContenedor.add(lblValorConvertido, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 460, -1, -1));

        txtValorConvertir.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtValorConvertir.setForeground(new java.awt.Color(204, 204, 204));
        txtValorConvertir.setText("Ingresa el valor a convertir");
        txtValorConvertir.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtValorConvertirFocusGained(evt);
            }
        });
        txtValorConvertir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorConvertirKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorConvertirKeyTyped(evt);
            }
        });
        panelContenedor.add(txtValorConvertir, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 340, 270, 40));

        txtValorConvertido.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        txtValorConvertido.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtValorConvertido.setEnabled(false);
        panelContenedor.add(txtValorConvertido, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 450, 270, 40));

        btnConvertir.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnConvertir.setText("Convertir");
        btnConvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConvertirActionPerformed(evt);
            }
        });
        panelContenedor.add(btnConvertir, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 570, -1, 40));

        btnReset.setFont(new java.awt.Font("Roboto", 0, 18)); // NOI18N
        btnReset.setText("Limpiar Campos");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        panelContenedor.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 570, -1, 40));

        lblTituloConversorTemp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTituloConversorTemp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/textoConversorTemperaturaV.gif"))); // NOI18N
        lblTituloConversorTemp.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelContenedor.add(lblTituloConversorTemp, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 510, 100));

        lblTituloConversorUnidades.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/img/textoConversorUnidadesV.gif"))); // NOI18N
        panelContenedor.add(lblTituloConversorUnidades, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 540, 90));

        bg.add(panelContenedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 740, 680));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblConversorMonedaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorMonedaMouseEntered
        lblConversorMoneda.setSize(160, 160);
    }//GEN-LAST:event_lblConversorMonedaMouseEntered

    private void lblConversorMonedaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorMonedaMouseExited
        lblConversorMoneda.setSize(140, 140);
    }//GEN-LAST:event_lblConversorMonedaMouseExited

    private void lblConversorTemperaturaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorTemperaturaMouseEntered
        lblConversorTemperatura.setSize(160, 180);
    }//GEN-LAST:event_lblConversorTemperaturaMouseEntered

    private void lblConversorTemperaturaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorTemperaturaMouseExited
        lblConversorTemperatura.setSize(140, 160);
    }//GEN-LAST:event_lblConversorTemperaturaMouseExited

    private void lblConversorUnidadesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorUnidadesMouseEntered
        lblConversorUnidades.setSize(180, 180);
    }//GEN-LAST:event_lblConversorUnidadesMouseEntered

    private void lblConversorUnidadesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorUnidadesMouseExited
        lblConversorUnidades.setSize(130, 160);
    }//GEN-LAST:event_lblConversorUnidadesMouseExited

    private void btnConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConvertirActionPerformed
        opcion = (String) comboConversiones.getSelectedItem();
        double valorEntrada = 0.0;
        double valorSalida = 0.0;

        if (tipoConversor.equals("moneda")) {
            switch (opcion) {
                case "Dolar a Euros":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.93;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Dolar a Libras Esterlinas":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.82;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Dolar a Yen Japones":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 131.84;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Dolar a Won Sur Coreano":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 1308.75;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Euros a Dolar":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 1.08;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Libras Esterlinas a Dolar":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 1.22;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Yen Japones a Dolar":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.0076;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Won Sur Coreano a Dolar":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.00076;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                default:
                    System.out.println(opcion);
                    break;
            }
        } else if (tipoConversor.equals("temperatura")) {

            switch (opcion) {

                case "Celcius a Farenheit":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = (valorEntrada * (1.8)) + 32;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Celcius a Kelvin":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada + 273.15;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Farenheit a Celcius":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = (valorEntrada - 32) / (1.8);
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Farenheit a Kelvin":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = (valorEntrada + 459.67) / (1.8);
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Kelvin a Celcius":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = (valorEntrada - 273.15);
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "kelvin a Farenheit":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = ((valorEntrada - 273.15) * (1.8)) + 32;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                default:
                    lblSignoEntrada.setText("°C");
                    lblSignoSalida.setText("°F");
                    break;
            }
        } else if (tipoConversor.equals("unidades")) {

            switch (opcion) {
                case "m a cm":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 100;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "m a Km":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.001;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "m a mm":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 1000;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "cm a m":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.01;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "cm a Km":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.00001;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "cm a mm":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 10;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Km a m":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 1000;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Km a cm":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 100000;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "Km a mm":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 1000000;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "mm a Km":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.000001;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "mm a m":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.001;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                case "mm a cm":
                    valorEntrada = Double.parseDouble(txtValorConvertir.getText());
                    valorSalida = valorEntrada * 0.1;
                    txtValorConvertido.setText(String.valueOf(valorSalida));
                    break;
                default:
                    lblSignoEntrada.setText("m");
                    lblSignoSalida.setText("cm");
                    break;
            }
        }
    }//GEN-LAST:event_btnConvertirActionPerformed

    private void reset() {
        txtValorConvertir.setText("Ingresa el valor a convertir");
        txtValorConvertido.setText("");
        txtValorConvertir.setForeground(Color.GRAY);
    }

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        reset();
    }//GEN-LAST:event_btnResetActionPerformed

    private void txtValorConvertirFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorConvertirFocusGained
        txtValorConvertir.setText("");
        txtValorConvertir.setForeground(Color.black);
    }//GEN-LAST:event_txtValorConvertirFocusGained

    private void comboConversionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboConversionesActionPerformed
        reset();
        opcion = (String) comboConversiones.getSelectedItem();
        if (opcion != null) {
            if (tipoConversor.equals("moneda")) {

                switch (opcion) {
                    case "Dolar a Euros":
                        lblSignoEntrada.setText("$");
                        lblSignoSalida.setText("€");
                        break;
                    case "Dolar a Libras Esterlinas":
                        lblSignoEntrada.setText("$");
                        lblSignoSalida.setText("£");
                        break;
                    case "Dolar a Yen Japones":
                        lblSignoEntrada.setText("$");
                        lblSignoSalida.setText("¥");
                        break;
                    case "Dolar a Won Sur Coreano":
                        lblSignoEntrada.setText("$");
                        lblSignoSalida.setText("₩");
                        break;
                    case "Euros a Dolar":
                        lblSignoSalida.setText("$");
                        lblSignoEntrada.setText("€");
                        break;
                    case "Libras Esterlinas a Dolar":
                        lblSignoEntrada.setText("£");
                        lblSignoSalida.setText("$");
                        break;
                    case "Yen Japones a Dolar":
                        lblSignoSalida.setText("$");
                        lblSignoEntrada.setText("¥");
                        break;
                    case "Won Sur Coreano a Dolar":
                        lblSignoSalida.setText("$");
                        lblSignoEntrada.setText("₩");
                        break;
                    default:
                        System.out.println(opcion);
                        break;
                }
            } else if (tipoConversor.equals("temperatura")) {

                switch (opcion) {
                    case "Celcius a Farenheit":
                        lblSignoEntrada.setText("°C");
                        lblSignoSalida.setText("°F");
                        break;
                    case "Celcius a Kelvin":
                        lblSignoEntrada.setText("°C");
                        lblSignoSalida.setText("°K");
                        break;
                    case "Farenheit a Celcius":
                        lblSignoEntrada.setText("°F");
                        lblSignoSalida.setText("°C");
                        break;
                    case "Farenheit a Kelvin":
                        lblSignoEntrada.setText("°F");
                        lblSignoSalida.setText("°K");
                        break;
                    case "Kelvin a Celcius":
                        lblSignoEntrada.setText("°K");
                        lblSignoSalida.setText("°C");
                        break;
                    case "kelvin a Farenheit":
                        lblSignoEntrada.setText("°K");
                        lblSignoSalida.setText("°F");
                        break;
                    default:
                        lblSignoEntrada.setText("°C");
                        lblSignoSalida.setText("°F");
                        break;
                }
            } else if (tipoConversor.equals("unidades")) {

                switch (opcion) {
                    case "m a cm":
                        lblSignoEntrada.setText("m");
                        lblSignoSalida.setText("cm");
                        break;
                    case "m a Km":
                        lblSignoEntrada.setText("m");
                        lblSignoSalida.setText("Km");
                        break;
                    case "m a mm":
                        lblSignoEntrada.setText("m");
                        lblSignoSalida.setText("mm");
                        break;
                    case "cm a m":
                        lblSignoEntrada.setText("cm");
                        lblSignoSalida.setText("m");
                        break;
                    case "cm a Km":
                        lblSignoEntrada.setText("cm");
                        lblSignoSalida.setText("Km");
                        break;
                    case "cm a mm":
                        lblSignoEntrada.setText("cm");
                        lblSignoSalida.setText("mm");
                        break;
                    case "Km a m":
                        lblSignoEntrada.setText("Km");
                        lblSignoSalida.setText("m");
                        break;
                    case "Km a cm":
                        lblSignoEntrada.setText("Km");
                        lblSignoSalida.setText("cm");
                        break;
                    case "Km a mm":
                        lblSignoEntrada.setText("Km");
                        lblSignoSalida.setText("mm");
                        break;
                    case "mm a Km":
                        lblSignoEntrada.setText("mm");
                        lblSignoSalida.setText("Km");
                        break;
                    case "mm a m":
                        lblSignoEntrada.setText("mm");
                        lblSignoSalida.setText("m");
                        break;
                    case "mm a cm":
                        lblSignoEntrada.setText("mm");
                        lblSignoSalida.setText("cm");
                        break;
                    default:
                        lblSignoEntrada.setText("m");
                        lblSignoSalida.setText("cm");
                        break;
                }
            }
        } else {
            System.out.println(opcion);
        }


    }//GEN-LAST:event_comboConversionesActionPerformed

    private void lblConversorMonedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorMonedaMouseClicked
        tipoConversor = "moneda";
        opcion = "Dolar a Euros";
        tituloConversor.setVisible(true);
        lblTituloConversorTemp.setVisible(false);
        lblTituloConversorUnidades.setVisible(false);
        reset();
        comboConversiones.removeAllItems();
        comboConversiones.addItem("Dolar a Euros");
        comboConversiones.addItem("Dolar a Libras Esterlinas");
        comboConversiones.addItem("Dolar a Yen Japones");
        comboConversiones.addItem("Dolar a Won Sur Coreano");
        comboConversiones.addItem("Euros a Dolar");
        comboConversiones.addItem("Libras Esterlinas a Dolar");
        comboConversiones.addItem("Yen Japones a Dolar");
        comboConversiones.addItem("Won Sur Coreano a Dolar");
        System.out.println(tipoConversor);
    }//GEN-LAST:event_lblConversorMonedaMouseClicked

    private void lblConversorTemperaturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorTemperaturaMouseClicked
        tipoConversor = "temperatura";
        opcion = "Celcius a Farenheit";
        lblTituloConversorTemp.setVisible(true);
        tituloConversor.setVisible(false);
        lblTituloConversorUnidades.setVisible(false);
        reset();
        comboConversiones.removeAllItems();
        comboConversiones.addItem("Celcius a Farenheit");
        comboConversiones.addItem("Celcius a Kelvin");
        comboConversiones.addItem("Farenheit a Celcius");
        comboConversiones.addItem("Farenheit a Kelvin");
        comboConversiones.addItem("Kelvin a Celcius");
        comboConversiones.addItem("kelvin a Farenheit");
        System.out.println(tipoConversor);
    }//GEN-LAST:event_lblConversorTemperaturaMouseClicked

    private void lblConversorUnidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblConversorUnidadesMouseClicked
        tipoConversor = "unidades";
        opcion = "m a cm";
        lblTituloConversorTemp.setVisible(false);
        tituloConversor.setVisible(false);
        lblTituloConversorUnidades.setVisible(true);
        reset();
        comboConversiones.removeAllItems();
        comboConversiones.addItem("m a cm");
        comboConversiones.addItem("m a Km");
        comboConversiones.addItem("m a mm");
        comboConversiones.addItem("cm a m");
        comboConversiones.addItem("cm a Km");
        comboConversiones.addItem("cm a mm");
        comboConversiones.addItem("Km a m");
        comboConversiones.addItem("Km a cm");
        comboConversiones.addItem("Km a mm");
        comboConversiones.addItem("mm a Km");
        comboConversiones.addItem("mm a m");
        comboConversiones.addItem("mm a cm");
        System.out.println(tipoConversor);
    }//GEN-LAST:event_lblConversorUnidadesMouseClicked

    private void comboConversionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comboConversionesMouseClicked


    }//GEN-LAST:event_comboConversionesMouseClicked

    private void txtValorConvertirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorConvertirKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorConvertirKeyPressed

    private void txtValorConvertirKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorConvertirKeyTyped
        int tecla = evt.getKeyChar();

        if (!(tecla >= 48 && tecla <= 57)) {
            reset();
            JOptionPane.showMessageDialog(null, "Ingrese solo números", "Error", 2);
        }
    }//GEN-LAST:event_txtValorConvertirKeyTyped

    private void lblXMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblXMouseClicked
        System.exit(0);
    }//GEN-LAST:event_lblXMouseClicked

    private void lblXMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblXMouseEntered
        lblX.setForeground(Color.red);
    }//GEN-LAST:event_lblXMouseEntered

    private void lblXMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblXMouseExited
        lblX.setForeground(Color.black);
    }//GEN-LAST:event_lblXMouseExited

    private void panelBarraSuperiorMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBarraSuperiorMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_panelBarraSuperiorMousePressed

    private void panelBarraSuperiorMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBarraSuperiorMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_panelBarraSuperiorMouseDragged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuConversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuConversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuConversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuConversor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuConversor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator Separador;
    private javax.swing.JPanel bg;
    private javax.swing.JButton btnConvertir;
    private javax.swing.JButton btnReset;
    private javax.swing.JComboBox<String> comboConversiones;
    private javax.swing.JLabel lblConversorMoneda;
    private javax.swing.JLabel lblConversorTemperatura;
    private javax.swing.JLabel lblConversorUnidades;
    private javax.swing.JLabel lblFondoMenu;
    private javax.swing.JLabel lblLogoAlura;
    private javax.swing.JLabel lblNombreConversorMoneda;
    private javax.swing.JLabel lblNombreConversorTemperatura;
    private javax.swing.JLabel lblNombreConversorUnidades;
    private javax.swing.JLabel lblSeleccionConversion;
    private javax.swing.JLabel lblSignoEntrada;
    private javax.swing.JLabel lblSignoSalida;
    private javax.swing.JLabel lblTituloConversorTemp;
    private javax.swing.JLabel lblTituloConversorUnidades;
    private javax.swing.JLabel lblValorAConvertir;
    private javax.swing.JLabel lblValorConvertido;
    private javax.swing.JLabel lblX;
    private javax.swing.JPanel panelBarraSuperior;
    private javax.swing.JPanel panelContenedor;
    private javax.swing.JLabel tituloConversor;
    private javax.swing.JTextField txtValorConvertido;
    private javax.swing.JTextField txtValorConvertir;
    // End of variables declaration//GEN-END:variables
}
